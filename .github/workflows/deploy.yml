name: "Deploy"

on:
  workflow_dispatch

# Allow one run of this workflow per branch and cancel existing runs if triggered again
concurrency:
  group: jdmdepot-deploy-${{ github.ref }}
  cancel-in-progress: true

jobs:
  release:
    runs-on: ubuntu-latest
    outputs:
      TAG_NAME: ${{ steps.release_export.outputs.TAG_NAME }}
      FILE_NAME: ${{ steps.release_export.outputs.FILE_NAME }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: '0' # Load entire history
      - uses: actions/setup-nodejs@v3
        with:
          dotnet-version: '20.5'
      - run: npm ci
        working-directory: ./src
      - run: npm run build
        working-directory: ./src
      - name: Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npx semantic-release --dry-run
  deploy:
    needs: release
    permissions:
      pages: write
      id-token: write
    environment:
      name: production
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - run: gh release download ${{ needs.release.outputs.TAG_NAME }} --pattern "${{ needs.release.outputs.FILE_NAME }}"
        env:
          GH_TOKEN: ${{ github.token }}
      - name: Clean server build dir
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DEPLOY_SSH_HOST }}
          username: ${{ secrets.DEPLOY_SSH_USERNAME }}
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          port: ${{ secrets.DEPLOY_SSH_PORT }}
          script: mkdir -p /tmp/jdmdepot/${{ github.sha }}
      - name: Copy to server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.DEPLOY_SSH_HOST }}
          username: ${{ secrets.DEPLOY_SSH_USERNAME }}
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          port: ${{ secrets.DEPLOY_SSH_PORT }}
          source: "./${{ needs.release.outputs.FILE_NAME }}"
          target: "/tmp/jdmdepot/${{ github.sha }}/${{ needs.release.outputs.TAG_NAME }}"
      - name: Deploy
        uses: appleboy/ssh-action@master
        with:
          debug: false
          host: ${{ secrets.DEPLOY_SSH_HOST }}
          username: ${{ secrets.DEPLOY_SSH_USERNAME }}
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          port: ${{ secrets.DEPLOY_SSH_PORT }}
          # NOTE: If you don't _also_ export the variable in the script, docker won't be able to see it!
          script_stop: true
          script: |
            cd /tmp/jdmdepot/${{ github.sha }}/${{ needs.release.outputs.TAG_NAME }}
            tar -xzf "${{ needs.release.outputs.FILE_NAME }}"
            rm "${{ needs.release.outputs.FILE_NAME }}"

            mkdir -p "${{ secrets.DEPLOY_DIRECTORY }}/${{ needs.release.outputs.TAG_NAME }}"
            cp -r ./dist/. "${{ secrets.DEPLOY_DIRECTORY }}/${{ needs.release.outputs.TAG_NAME }}"

            ln -s "${{ secrets.DEPLOY_APPSETTINGS_PATH }}" "${{ secrets.DEPLOY_DIRECTORY }}/${{ needs.release.outputs.TAG_NAME }}/"

            sudo systemctl stop jdmdepot.service
            rm "${{ secrets.DEPLOY_DIRECTORY }}/latest" || true
            ln -s "${{ secrets.DEPLOY_DIRECTORY }}/${{ needs.release.outputs.TAG_NAME}}/" "${{ secrets.DEPLOY_DIRECTORY }}/latest"
            sudo systemctl start jdmdepot.service